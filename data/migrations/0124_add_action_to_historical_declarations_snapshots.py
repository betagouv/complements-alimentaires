# Generated by Django 5.1.5 on 2025-02-27 13:57

from django.db import migrations
# les vraies class de models sont importées et non les HistoricalModels (via apps.get_model) pour permettre les query sur les relatedFields
# ce n'est pas un problème sur cette migration car elle est applicable seulement 1 fois.
from data.models import IcaDeclaration, IcaVersionDeclaration, Declaration
from data.etl.teleicare_history.extractor import compute_action, add_final_state_snapshot, convert_str_date, get_oldest_and_latest

class Migration(migrations.Migration):

    dependencies = [
        ('data', '0123_company_old_siret_company_old_vat'),
    ]

    def set_action(apps, schema_editor):
        """Set action to the first snapshot of declarations from TeleIcare"""
        Snapshot = apps.get_model("data", "Snapshot")
        for declaration in Declaration.objects.exclude(siccrf_id=None).iterator():

            # filtre les snapshots créés via l'api pour éviter les snapshots de 'Retrait du marché' qui ont déjà une action,
            # en forçant le nb de version à 1 les actions RESPOND_ éventuelles seront remplacées par des actions SUBMIT
            snapshots_qs = declaration.snapshots.filter(action=None)
            for snapshot in snapshots_qs:
                snapshot.action = compute_action(snapshot.status, 1) 
                snapshot.save()

    def reverse_set_action(apps, schema_editor):
        pass

    def set_missing_snapshots(apps, schema_editor):
        """Set last state from TeleIcare snapshot when it misses"""
        for declaration in Declaration.objects.exclude(siccrf_id=None).filter(snapshots=None).iterator():
            all_ica_declarations = IcaDeclaration.objects.filter(cplalim_id=declaration.siccrf_id)
            _, latest_ica_declaration = get_oldest_and_latest(all_ica_declarations)
            declaration_versions = IcaVersionDeclaration.objects.filter(
                dcl_id=latest_ica_declaration.dcl_ident,
                stattdcl_ident__in=[
                    2,
                    5,
                    6,
                    8,
                ],
                stadcl_ident=8,
            )
            nb_version_declaration = declaration_versions.count()
            latest_ica_version_declaration = declaration_versions.order_by("vrsdecl_numero").last()
            declaration_acceptation_date = (
                    convert_str_date(latest_ica_declaration.dcl_date, aware=True)
                    if latest_ica_declaration.dcl_date
                    else ""
                )
            add_final_state_snapshot(declaration, latest_ica_version_declaration, declaration_acceptation_date, nb_version_declaration)
            
    def reverse_set_missing_snapshots(apps, schema_editor):
        pass

    operations = [
        migrations.RunPython(set_action, reverse_set_action),
        migrations.RunPython(set_missing_snapshots, reverse_set_missing_snapshots),

    ]
