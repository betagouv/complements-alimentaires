# Generated by Django 5.0.2 on 2024-03-01 20:59

import django.db.models.deletion
import django.db.models.functions.comparison
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("data", "0019_rename_siccrf_name_historicalingredientsynonym_name_and_more"),
    ]

    operations = [
        migrations.RenameField(
            model_name="condition",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="condition",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="historicalcondition",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="historicalcondition",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="historicalingredient",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="historicalingredient",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="historicalingredient",
            old_name="CA_private_comments",
            new_name="ca_private_comments",
        ),
        migrations.RenameField(
            model_name="historicalingredient",
            old_name="CA_public_comments",
            new_name="ca_public_comments",
        ),
        migrations.RenameField(
            model_name="historicalingredientsubstancerelation",
            old_name="CA_is_related",
            new_name="ca_is_related",
        ),
        migrations.RenameField(
            model_name="historicalmicroorganism",
            old_name="CA_genre",
            new_name="ca_genre",
        ),
        migrations.RenameField(
            model_name="historicalmicroorganism",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="historicalmicroorganism",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="historicalmicroorganism",
            old_name="CA_private_comments",
            new_name="ca_private_comments",
        ),
        migrations.RenameField(
            model_name="historicalmicroorganism",
            old_name="CA_public_comments",
            new_name="ca_public_comments",
        ),
        migrations.RenameField(
            model_name="historicalmicroorganismsubstancerelation",
            old_name="CA_is_related",
            new_name="ca_is_related",
        ),
        migrations.RenameField(
            model_name="historicalpart",
            old_name="CA_is_useful",
            new_name="ca_is_useful",
        ),
        migrations.RenameField(
            model_name="historicalpart",
            old_name="CA_must_be_monitored",
            new_name="ca_must_be_monitored",
        ),
        migrations.RenameField(
            model_name="historicalplant",
            old_name="CA_family",
            new_name="ca_family",
        ),
        migrations.RenameField(
            model_name="historicalplant",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="historicalplant",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="historicalplant",
            old_name="CA_private_comments",
            new_name="ca_private_comments",
        ),
        migrations.RenameField(
            model_name="historicalplant",
            old_name="CA_public_comments",
            new_name="ca_public_comments",
        ),
        migrations.RenameField(
            model_name="historicalplantfamily",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="historicalplantfamily",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="historicalplantpart",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="historicalplantpart",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="historicalplantsubstancerelation",
            old_name="CA_is_related",
            new_name="ca_is_related",
        ),
        migrations.RenameField(
            model_name="historicalpopulation",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="historicalpopulation",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="historicalsubstance",
            old_name="CA_cas_number",
            new_name="ca_cas_number",
        ),
        migrations.RenameField(
            model_name="historicalsubstance",
            old_name="CA_einec_number",
            new_name="ca_einec_number",
        ),
        migrations.RenameField(
            model_name="historicalsubstance",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="historicalsubstance",
            old_name="CA_max_quantity",
            new_name="ca_max_quantity",
        ),
        migrations.RenameField(
            model_name="historicalsubstance",
            old_name="CA_must_specify_quantity",
            new_name="ca_must_specify_quantity",
        ),
        migrations.RenameField(
            model_name="historicalsubstance",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="historicalsubstance",
            old_name="CA_nutritional_reference",
            new_name="ca_nutritional_reference",
        ),
        migrations.RenameField(
            model_name="historicalsubstance",
            old_name="CA_private_comments",
            new_name="ca_private_comments",
        ),
        migrations.RenameField(
            model_name="historicalsubstance",
            old_name="CA_public_comments",
            new_name="ca_public_comments",
        ),
        migrations.RenameField(
            model_name="historicalsubstance",
            old_name="CA_source",
            new_name="ca_source",
        ),
        migrations.RenameField(
            model_name="ingredient",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="ingredient",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="ingredient",
            old_name="CA_private_comments",
            new_name="ca_private_comments",
        ),
        migrations.RenameField(
            model_name="ingredient",
            old_name="CA_public_comments",
            new_name="ca_public_comments",
        ),
        migrations.RenameField(
            model_name="ingredientsubstancerelation",
            old_name="CA_is_related",
            new_name="ca_is_related",
        ),
        migrations.RenameField(
            model_name="microorganism",
            old_name="CA_genre",
            new_name="ca_genre",
        ),
        migrations.RenameField(
            model_name="microorganism",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="microorganism",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="microorganism",
            old_name="CA_private_comments",
            new_name="ca_private_comments",
        ),
        migrations.RenameField(
            model_name="microorganism",
            old_name="CA_public_comments",
            new_name="ca_public_comments",
        ),
        migrations.RenameField(
            model_name="microorganismsubstancerelation",
            old_name="CA_is_related",
            new_name="ca_is_related",
        ),
        migrations.RenameField(
            model_name="part",
            old_name="CA_is_useful",
            new_name="ca_is_useful",
        ),
        migrations.RenameField(
            model_name="part",
            old_name="CA_must_be_monitored",
            new_name="ca_must_be_monitored",
        ),
        migrations.RenameField(
            model_name="plant",
            old_name="CA_family",
            new_name="ca_family",
        ),
        migrations.RenameField(
            model_name="plant",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="plant",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="plant",
            old_name="CA_private_comments",
            new_name="ca_private_comments",
        ),
        migrations.RenameField(
            model_name="plant",
            old_name="CA_public_comments",
            new_name="ca_public_comments",
        ),
        migrations.RenameField(
            model_name="plantfamily",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="plantfamily",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="plantpart",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="plantpart",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="plantsubstancerelation",
            old_name="CA_is_related",
            new_name="ca_is_related",
        ),
        migrations.RenameField(
            model_name="population",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="population",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="substance",
            old_name="CA_cas_number",
            new_name="ca_cas_number",
        ),
        migrations.RenameField(
            model_name="substance",
            old_name="CA_einec_number",
            new_name="ca_einec_number",
        ),
        migrations.RenameField(
            model_name="substance",
            old_name="CA_is_obsolete",
            new_name="ca_is_obsolete",
        ),
        migrations.RenameField(
            model_name="substance",
            old_name="CA_max_quantity",
            new_name="ca_max_quantity",
        ),
        migrations.RenameField(
            model_name="substance",
            old_name="CA_must_specify_quantity",
            new_name="ca_must_specify_quantity",
        ),
        migrations.RenameField(
            model_name="substance",
            old_name="CA_name",
            new_name="ca_name",
        ),
        migrations.RenameField(
            model_name="substance",
            old_name="CA_nutritional_reference",
            new_name="ca_nutritional_reference",
        ),
        migrations.RenameField(
            model_name="substance",
            old_name="CA_private_comments",
            new_name="ca_private_comments",
        ),
        migrations.RenameField(
            model_name="substance",
            old_name="CA_public_comments",
            new_name="ca_public_comments",
        ),
        migrations.RenameField(
            model_name="substance",
            old_name="CA_source",
            new_name="ca_source",
        ),
        migrations.AddField(
            model_name="historicalingredient",
            name="private_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_private_comments"), models.Value("")),
                    models.F("siccrf_private_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires privés"),
            ),
        ),
        migrations.AddField(
            model_name="historicalingredient",
            name="public_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_public_comments"), models.Value("")),
                    models.F("siccrf_public_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires publics"),
            ),
        ),
        migrations.AddField(
            model_name="historicalmicroorganism",
            name="private_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_private_comments"), models.Value("")),
                    models.F("siccrf_private_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires privés"),
            ),
        ),
        migrations.AddField(
            model_name="historicalmicroorganism",
            name="public_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_public_comments"), models.Value("")),
                    models.F("siccrf_public_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires publics"),
            ),
        ),
        migrations.AddField(
            model_name="historicalplant",
            name="private_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_private_comments"), models.Value("")),
                    models.F("siccrf_private_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires privés"),
            ),
        ),
        migrations.AddField(
            model_name="historicalplant",
            name="public_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_public_comments"), models.Value("")),
                    models.F("siccrf_public_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires publics"),
            ),
        ),
        migrations.AddField(
            model_name="historicalsubstance",
            name="private_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_private_comments"), models.Value("")),
                    models.F("siccrf_private_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires privés"),
            ),
        ),
        migrations.AddField(
            model_name="historicalsubstance",
            name="public_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_public_comments"), models.Value("")),
                    models.F("siccrf_public_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires publics"),
            ),
        ),
        migrations.AddField(
            model_name="ingredient",
            name="private_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_private_comments"), models.Value("")),
                    models.F("siccrf_private_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires privés"),
            ),
        ),
        migrations.AddField(
            model_name="ingredient",
            name="public_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_public_comments"), models.Value("")),
                    models.F("siccrf_public_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires publics"),
            ),
        ),
        migrations.AddField(
            model_name="microorganism",
            name="private_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_private_comments"), models.Value("")),
                    models.F("siccrf_private_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires privés"),
            ),
        ),
        migrations.AddField(
            model_name="microorganism",
            name="public_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_public_comments"), models.Value("")),
                    models.F("siccrf_public_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires publics"),
            ),
        ),
        migrations.AddField(
            model_name="plant",
            name="private_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_private_comments"), models.Value("")),
                    models.F("siccrf_private_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires privés"),
            ),
        ),
        migrations.AddField(
            model_name="plant",
            name="public_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_public_comments"), models.Value("")),
                    models.F("siccrf_public_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires publics"),
            ),
        ),
        migrations.AddField(
            model_name="substance",
            name="private_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_private_comments"), models.Value("")),
                    models.F("siccrf_private_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires privés"),
            ),
        ),
        migrations.AddField(
            model_name="substance",
            name="public_comments",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_public_comments"), models.Value("")),
                    models.F("siccrf_public_comments"),
                ),
                output_field=models.TextField(verbose_name="commentaires publics"),
            ),
        ),
        # migrations.AlterField(
        #     model_name="condition",
        #     name="is_obsolete",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
        #         ),
        #         output_field=models.BooleanField(verbose_name="objet obsolète"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="condition",
        #     name="name",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
        #             models.F("siccrf_name"),
        #         ),
        #         output_field=models.TextField(verbose_name="nom"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="ingredient",
        #     name="is_obsolete",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
        #         ),
        #         output_field=models.BooleanField(verbose_name="objet obsolète"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="ingredient",
        #     name="name",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
        #             models.F("siccrf_name"),
        #         ),
        #         output_field=models.TextField(verbose_name="nom"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="microorganism",
        #     name="genre",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             django.db.models.functions.comparison.NullIf(models.F("ca_genre"), models.Value("")),
        #             models.F("siccrf_genre"),
        #         ),
        #         output_field=models.TextField(verbose_name="genre de micro-organisme"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="microorganism",
        #     name="is_obsolete",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
        #         ),
        #         output_field=models.BooleanField(verbose_name="objet obsolète"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="microorganism",
        #     name="name",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
        #             models.F("siccrf_name"),
        #         ),
        #         output_field=models.TextField(verbose_name="nom"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="part",
        #     name="is_useful",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             models.F("ca_is_useful"), models.F("siccrf_is_useful")
        #         ),
        #         output_field=models.BooleanField(verbose_name="🍵 utile ?"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="part",
        #     name="must_be_monitored",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             models.F("ca_must_be_monitored"),
        #             models.F("siccrf_must_be_monitored"),
        #         ),
        #         output_field=models.BooleanField(verbose_name="⚠️ à surveiller ?"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="plant",
        #     name="family",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             models.F("ca_family"), models.F("siccrf_family")
        #         ),
        #         output_field=models.BigIntegerField(verbose_name="famille de plante"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="plant",
        #     name="is_obsolete",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
        #         ),
        #         output_field=models.BooleanField(verbose_name="objet obsolète"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="plant",
        #     name="name",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
        #             models.F("siccrf_name"),
        #         ),
        #         output_field=models.TextField(verbose_name="nom"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="plantfamily",
        #     name="is_obsolete",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
        #         ),
        #         output_field=models.BooleanField(verbose_name="objet obsolète"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="plantfamily",
        #     name="name",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
        #             models.F("siccrf_name"),
        #         ),
        #         output_field=models.TextField(verbose_name="nom"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="plantpart",
        #     name="is_obsolete",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
        #         ),
        #         output_field=models.BooleanField(verbose_name="objet obsolète"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="plantpart",
        #     name="name",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
        #             models.F("siccrf_name"),
        #         ),
        #         output_field=models.TextField(verbose_name="nom"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="population",
        #     name="is_obsolete",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
        #         ),
        #         output_field=models.BooleanField(verbose_name="objet obsolète"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="population",
        #     name="name",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
        #             models.F("siccrf_name"),
        #         ),
        #         output_field=models.TextField(verbose_name="nom"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="substance",
        #     name="cas_number",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             django.db.models.functions.comparison.NullIf(models.F("ca_cas_number"), models.Value("")),
        #             models.F("siccrf_cas_number"),
        #         ),
        #         output_field=models.CharField(blank=True, max_length=10, verbose_name="numéro CAS"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="substance",
        #     name="einec_number",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             django.db.models.functions.comparison.NullIf(models.F("ca_einec_number"), models.Value("")),
        #             models.F("siccrf_einec_number"),
        #         ),
        #         output_field=models.CharField(blank=True, max_length=7, verbose_name="numéro EINECS"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="substance",
        #     name="is_obsolete",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
        #         ),
        #         output_field=models.BooleanField(verbose_name="objet obsolète"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="substance",
        #     name="max_quantity",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             models.F("ca_nutritional_reference"),
        #             models.F("siccrf_nutritional_reference"),
        #         ),
        #         output_field=models.FloatField(
        #             blank=True,
        #             null=True,
        #             verbose_name="spécification de quantité obligatoire",
        #         ),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="substance",
        #     name="must_specify_quantity",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             models.F("ca_must_specify_quantity"),
        #             models.F("siccrf_must_specify_quantity"),
        #         ),
        #         output_field=models.BooleanField(default=False, verbose_name="spécification de quantité obligatoire"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="substance",
        #     name="name",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
        #             models.F("siccrf_name"),
        #         ),
        #         output_field=models.TextField(verbose_name="nom"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="substance",
        #     name="nutritional_reference",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             "ca_nutritional_reference", "siccrf_nutritional_reference"
        #         ),
        #         output_field=models.FloatField(blank=True, null=True, verbose_name="apport nutritionnel conseillé"),
        #     ),
        # ),
        # migrations.AlterField(
        #     model_name="substance",
        #     name="source",
        #     field=models.GeneratedField(
        #         db_persist=True,
        #         expression=django.db.models.functions.comparison.Coalesce(
        #             django.db.models.functions.comparison.NullIf(models.F("ca_source"), models.Value("")),
        #             models.F("siccrf_source"),
        #         ),
        #         output_field=models.TextField(),
        #     ),
        # ),
    ]
