# Generated by Django 5.1.7 on 2025-10-03 08:13
from django.db import migrations

import pandas as pd
import logging

from data.models.abstract_models import SynonymType

logger = logging.getLogger(__name__)

SYNONYM_TYPE_MAPPING = {1: SynonymType.SCIENTIFIC, 2: SynonymType.FRENCH, 3: SynonymType.ENGLISH}


class Migration(migrations.Migration):
    dependencies = [
        ("data", "0183_merge_20251002_1033"),
    ]

    def set_synonym_types(apps, schema_editor):
        PlantSynonym = apps.get_model("data", "PlantSynonym")
        plant_synonyms = pd.read_csv("data/migrations/0184_REF_ICA_PLANTE_SYNONYME_utf8.csv")
        for index, row in plant_synonyms.iterrows():
            try:
                synonym = PlantSynonym.objects.get(siccrf_id=row["SYNPLA_IDENT"])
                synonym.synonym_type = SYNONYM_TYPE_MAPPING[row["TYSYN_IDENT"]]
                synonym.save()
            except PlantSynonym.DoesNotExist:
                logger.warn(f"PlantSynonym.objects.get(siccrf_id={row['SYNPLA_IDENT']}) n'existe pas.")

        MicroorganismSynonym = apps.get_model("data", "MicroorganismSynonym")
        microorganism_synonyms = pd.read_csv("data/migrations/0184_REF_ICA_MICROORG_SYNONYME_utf8.csv")
        for index, row in microorganism_synonyms.iterrows():
            try:
                synonym = MicroorganismSynonym.objects.get(siccrf_id=row["SYNMO_IDENT"])
                synonym.synonym_type = SYNONYM_TYPE_MAPPING[row["TSYNMO_IDENT"]]
                synonym.save()
            except MicroorganismSynonym.DoesNotExist:
                logger.warn(f"MicroorganismSynonym.objects.get(siccrf_id={row['SYNMO_IDENT']}) n'existe pas.")

        IngredientSynonym = apps.get_model("data", "IngredientSynonym")
        ingredient_synonyms = pd.read_csv("data/migrations/0184_REF_ICA_INGREDIENT_AUTRE_SYNONYME_utf8.csv")
        for index, row in ingredient_synonyms.iterrows():
            try:
                synonym = IngredientSynonym.objects.get(siccrf_id=row["SYNAO_IDENT"])
                synonym.synonym_type = SYNONYM_TYPE_MAPPING[row["TSYNAO_IDENT"]]
                synonym.save()
            except IngredientSynonym.DoesNotExist:
                logger.warn(f"IngredientSynonym.objects.get(siccrf_id={row['SYNAO_IDENT']}) n'existe pas.")

        SubstanceSynonym = apps.get_model("data", "SubstanceSynonym")
        substance_synonyms = pd.read_csv("data/migrations/0184_REF_ICA_SUBSTANCE_ACTIVE_SYNONYME_utf8.csv")
        for index, row in substance_synonyms.iterrows():
            try:
                synonym = SubstanceSynonym.objects.get(siccrf_id=row["SYNSBSTA_IDENT"])
                synonym.synonym_type = SYNONYM_TYPE_MAPPING[row["TSYNSBSTA_IDENT"]]
                synonym.save()
            except SubstanceSynonym.DoesNotExist:
                logger.warn(f"SubstanceSynonym.objects.get(siccrf_id={row['SYNSBSTA_IDENT']}) n'existe pas.")

    def reverse_set_synonym_types(apps, schema_editor):
        pass

    operations = [
        migrations.RunPython(set_synonym_types, reverse_set_synonym_types),
    ]
