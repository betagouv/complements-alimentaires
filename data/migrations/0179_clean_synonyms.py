# Generated by Django 5.1.7 on 2025-09-26 08:54
import logging

from django.db import migrations
from django.db.models import Count

logger = logging.getLogger(__name__)

class Migration(migrations.Migration):

    dependencies = [
        ('data', '0178_alter_controlrole_always_persist'),
    ]

    def remove_obsolete(apps, schema_editor):
        IngredientSynonym = apps.get_model("data", "IngredientSynonym")
        MicroorganismSynonym = apps.get_model("data", "MicroorganismSynonym")
        PlantSynonym = apps.get_model("data", "PlantSynonym")
        SubstanceSynonym = apps.get_model("data", "SubstanceSynonym")
        for ingr_synonyms in [IngredientSynonym, MicroorganismSynonym, PlantSynonym, SubstanceSynonym]:
            for synonym in ingr_synonyms.objects.all().iterator():
                if synonym.siccrf_is_obsolete:
                    synonym.delete()

    def reverse_remove_obsolete(apps, schema_editor):
        pass

    def remove_duplicates(apps, schema_editor):
        IngredientSynonym = apps.get_model("data", "IngredientSynonym")
        MicroorganismSynonym = apps.get_model("data", "MicroorganismSynonym")
        PlantSynonym = apps.get_model("data", "PlantSynonym")
        SubstanceSynonym = apps.get_model("data", "SubstanceSynonym")
        for synonym_model in [IngredientSynonym, MicroorganismSynonym, PlantSynonym, SubstanceSynonym]:
            ingr_with_duplicate_synonym = synonym_model.objects.all().values('standard_name', 'name').annotate(total=Count('id')).filter(total__gt=1)
            for ingr in ingr_with_duplicate_synonym:
                objects_to_deduplicate = synonym_model.objects.filter(standard_name=ingr['standard_name'], name=ingr['name'])
                for i in range(ingr['total']-1):
                    try:
                        objects_to_deduplicate[i].delete()
                    except IndexError as e:
                        logger.exception(f"index {i} n'existe pas dans {objects_to_deduplicate} : {e}")

    def reverse_remove_duplicates(apps, schema_editor):
        pass

    operations = [
        migrations.RunPython(remove_obsolete, reverse_remove_obsolete),
        migrations.RunPython(remove_duplicates, reverse_remove_duplicates),

    ]
