# Generated by Django 5.0.3 on 2024-04-01 15:49

import django.contrib.postgres.fields
import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("data", "0038_merge_20240329_1347"),
    ]

    operations = [
        migrations.CreateModel(
            name="Declaration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("creation_date", models.DateTimeField(auto_now_add=True)),
                ("modification_date", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Déclaration"),
                            (
                                "AWAITING_INSTRUCTION",
                                "En attente de retour instruction",
                            ),
                            ("AWAITING_PRODUCER", "En attente de retour du déclarant"),
                            ("REJECTED", "Rejeté"),
                            ("APPROVED", "Validé"),
                        ],
                        default="DRAFT",
                        max_length=50,
                        verbose_name="Status",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True, help_text="numéro et voie", verbose_name="adresse"
                    ),
                ),
                (
                    "additional_details",
                    models.TextField(
                        blank=True,
                        help_text="bâtiment, immeuble, escalier et numéro d’appartement",
                        verbose_name="complément d’adresse",
                    ),
                ),
                (
                    "postal_code",
                    models.TextField(
                        blank=True, max_length=10, verbose_name="code postal"
                    ),
                ),
                ("city", models.TextField(blank=True, verbose_name="ville ou commune")),
                ("cedex", models.TextField(blank=True, verbose_name="CEDEX")),
                (
                    "country",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("FR", "France"),
                            ("DE", "Allemagne"),
                            ("AT", "Autriche"),
                            ("BE", "Belgique"),
                            ("BG", "Bulgarie"),
                            ("CY", "Chypre"),
                            ("HR", "Croatie"),
                            ("DK", "Danemark"),
                            ("ES", "Espagne"),
                            ("EE", "Estonie"),
                            ("FI", "Finlande"),
                            ("GR", "Grèce"),
                            ("HU", "Hongrie"),
                            ("IE", "Irlande"),
                            ("NI", "Irlande du Nord"),
                            ("IS", "Islande"),
                            ("IT", "Italie"),
                            ("LV", "Lettonie"),
                            ("LI", "Liechtenstein"),
                            ("LT", "Lituanie"),
                            ("LU", "Luxembourg"),
                            ("MT", "Malte"),
                            ("NO", "Norvège"),
                            ("NL", "Pays-Bas"),
                            ("PL", "Pologne"),
                            ("PT", "Portugal"),
                            ("RO", "Roumanie"),
                            ("SK", "Slovaquie"),
                            ("SI", "Slovénie"),
                            ("SE", "Suède"),
                            ("CZ", "République Tchèque"),
                        ],
                        verbose_name="pays",
                    ),
                ),
                ("name", models.TextField(blank=True, verbose_name="nom du produit")),
                ("brand", models.TextField(blank=True, verbose_name="marque")),
                ("gamme", models.TextField(blank=True, verbose_name="gamme")),
                ("flavor", models.TextField(blank=True, verbose_name="arôme")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "galenic_formulation",
                    models.TextField(blank=True, verbose_name="forme galénique"),
                ),
                (
                    "unit_quantity",
                    models.FloatField(
                        null=True,
                        verbose_name="poids ou volume d'une unité de consommation",
                    ),
                ),
                (
                    "conditioning",
                    models.TextField(blank=True, verbose_name="conditionnement"),
                ),
                (
                    "daily_recommended_dose",
                    models.TextField(
                        blank=True, verbose_name="dose journalière recommandée"
                    ),
                ),
                (
                    "minimum_duration",
                    models.TextField(
                        blank=True, verbose_name="durabilité minimale / DLUO (en mois)"
                    ),
                ),
                (
                    "instructions",
                    models.TextField(blank=True, verbose_name="mode d'emploi"),
                ),
                (
                    "warning",
                    models.TextField(
                        blank=True, verbose_name="mise en garde et avertissement"
                    ),
                ),
                (
                    "effects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        null=True,
                        size=None,
                        verbose_name="objectifs ou effets",
                    ),
                ),
                (
                    "other_effects",
                    models.TextField(
                        blank=True, verbose_name="autres objectifs ou effets non-listés"
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="declarations",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="auteur",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="declarations",
                        to="data.company",
                        verbose_name="entreprise",
                    ),
                ),
                (
                    "conditions_not_recommended",
                    models.ManyToManyField(
                        to="data.condition", verbose_name="consommation déconseillée"
                    ),
                ),
                (
                    "populations",
                    models.ManyToManyField(
                        blank=True,
                        to="data.population",
                        verbose_name="populations cible",
                    ),
                ),
                (
                    "unit_measurement",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="data.substanceunit",
                        verbose_name="unité de mesure pour une unité de consommation",
                    ),
                ),
            ],
            options={
                "verbose_name": "déclaration",
            },
        ),
        migrations.CreateModel(
            name="ComputedSubstance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.FloatField(
                        blank=True, null=True, verbose_name="quantité par DJR"
                    ),
                ),
                (
                    "substance",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="data.substance",
                        verbose_name="substance ajoutée par l'user",
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="data.substanceunit",
                        verbose_name="unité",
                    ),
                ),
                (
                    "declaration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="computed_substances",
                        to="data.declaration",
                        verbose_name="déclaration",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Attachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("LABEL", "Étiquetage"),
                            ("REGULATORY_PROOF", "Preuve règlementaire"),
                            (
                                "CERTIFICATE_AUTHORITY",
                                "Attestation d'une autorité compétente",
                            ),
                            ("ADDITIONAL_INFO", "Compléments info professionnel"),
                            ("OBSERVATIONS", "Observations professionnel"),
                            ("PROFESSIONAL_MAIL", "Autre courrier du professionnel"),
                            ("DRAFT", "Brouillon"),
                            ("OTHER", "Autre professionnel"),
                            ("ANALYSIS_REPORT", "Bulletin d'analyse"),
                        ],
                        max_length=50,
                        null=True,
                        verbose_name="type",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="declaration-attachments/%Y/%m/%d/",
                        verbose_name="pièce jointe",
                    ),
                ),
                (
                    "declaration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="data.declaration",
                        verbose_name="déclaration",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DeclaredIngredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("new", models.BooleanField(default=False)),
                ("new_name", models.TextField(blank=True, verbose_name="libellé")),
                (
                    "new_description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("active", models.BooleanField(default=True)),
                (
                    "declaration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="declared_ingredients",
                        to="data.declaration",
                        verbose_name="déclaration",
                    ),
                ),
                (
                    "ingredient",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="data.ingredient",
                        verbose_name="ingrédient ajouté par l'user",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DeclaredMicroorganism",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("new", models.BooleanField(default=False)),
                (
                    "new_name",
                    models.TextField(
                        blank=True,
                        verbose_name="nom du micro-organisme ajoutée manuellement",
                    ),
                ),
                (
                    "new_genre",
                    models.TextField(
                        blank=True,
                        verbose_name="genre du micro-organisme ajoutée manuellement",
                    ),
                ),
                (
                    "new_description",
                    models.TextField(
                        blank=True,
                        verbose_name="description du micro-organisme ajoutée manuellement",
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("souche", models.TextField(blank=True, verbose_name="souche")),
                (
                    "quantity",
                    models.FloatField(
                        blank=True, null=True, verbose_name="quantité par DJR (en CFU)"
                    ),
                ),
                (
                    "declaration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="declared_microorganisms",
                        to="data.declaration",
                        verbose_name="déclaration",
                    ),
                ),
                (
                    "microorganism",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="data.microorganism",
                        verbose_name="microorganisme ajouté par l'user",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DeclaredPlant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("new", models.BooleanField(default=False)),
                (
                    "new_name",
                    models.TextField(
                        blank=True, verbose_name="nom de la plante ajoutée manuellement"
                    ),
                ),
                (
                    "new_description",
                    models.TextField(
                        blank=True,
                        verbose_name="description de la plante ajoutée manuellement",
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                (
                    "quantity",
                    models.FloatField(
                        blank=True, null=True, verbose_name="quantité par DJR"
                    ),
                ),
                (
                    "preparation",
                    models.TextField(blank=True, verbose_name="préparation"),
                ),
                (
                    "declaration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="declared_plants",
                        to="data.declaration",
                        verbose_name="déclaration",
                    ),
                ),
                (
                    "plant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="data.plant",
                        verbose_name="plante ajoutée par l'user",
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="data.substanceunit",
                        verbose_name="unité",
                    ),
                ),
                (
                    "used_part",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="data.plantpart",
                        verbose_name="partie utilisée",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DeclaredSubstance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                (
                    "declaration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="declared_substances",
                        to="data.declaration",
                        verbose_name="déclaration",
                    ),
                ),
                (
                    "substance",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="data.substance",
                        verbose_name="substance ajoutée par l'user",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HistoricalAttachment",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("LABEL", "Étiquetage"),
                            ("REGULATORY_PROOF", "Preuve règlementaire"),
                            (
                                "CERTIFICATE_AUTHORITY",
                                "Attestation d'une autorité compétente",
                            ),
                            ("ADDITIONAL_INFO", "Compléments info professionnel"),
                            ("OBSERVATIONS", "Observations professionnel"),
                            ("PROFESSIONAL_MAIL", "Autre courrier du professionnel"),
                            ("DRAFT", "Brouillon"),
                            ("OTHER", "Autre professionnel"),
                            ("ANALYSIS_REPORT", "Bulletin d'analyse"),
                        ],
                        max_length=50,
                        null=True,
                        verbose_name="type",
                    ),
                ),
                (
                    "file",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="pièce jointe",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "declaration",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.declaration",
                        verbose_name="déclaration",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical attachment",
                "verbose_name_plural": "historical attachments",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalComputedSubstance",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "quantity",
                    models.FloatField(
                        blank=True, null=True, verbose_name="quantité par DJR"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "declaration",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.declaration",
                        verbose_name="déclaration",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "substance",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.substance",
                        verbose_name="substance ajoutée par l'user",
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.substanceunit",
                        verbose_name="unité",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical computed substance",
                "verbose_name_plural": "historical computed substances",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDeclaration",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("creation_date", models.DateTimeField(blank=True, editable=False)),
                ("modification_date", models.DateTimeField(blank=True, editable=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Déclaration"),
                            (
                                "AWAITING_INSTRUCTION",
                                "En attente de retour instruction",
                            ),
                            ("AWAITING_PRODUCER", "En attente de retour du déclarant"),
                            ("REJECTED", "Rejeté"),
                            ("APPROVED", "Validé"),
                        ],
                        default="DRAFT",
                        max_length=50,
                        verbose_name="Status",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True, help_text="numéro et voie", verbose_name="adresse"
                    ),
                ),
                (
                    "additional_details",
                    models.TextField(
                        blank=True,
                        help_text="bâtiment, immeuble, escalier et numéro d’appartement",
                        verbose_name="complément d’adresse",
                    ),
                ),
                (
                    "postal_code",
                    models.TextField(
                        blank=True, max_length=10, verbose_name="code postal"
                    ),
                ),
                ("city", models.TextField(blank=True, verbose_name="ville ou commune")),
                ("cedex", models.TextField(blank=True, verbose_name="CEDEX")),
                (
                    "country",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("FR", "France"),
                            ("DE", "Allemagne"),
                            ("AT", "Autriche"),
                            ("BE", "Belgique"),
                            ("BG", "Bulgarie"),
                            ("CY", "Chypre"),
                            ("HR", "Croatie"),
                            ("DK", "Danemark"),
                            ("ES", "Espagne"),
                            ("EE", "Estonie"),
                            ("FI", "Finlande"),
                            ("GR", "Grèce"),
                            ("HU", "Hongrie"),
                            ("IE", "Irlande"),
                            ("NI", "Irlande du Nord"),
                            ("IS", "Islande"),
                            ("IT", "Italie"),
                            ("LV", "Lettonie"),
                            ("LI", "Liechtenstein"),
                            ("LT", "Lituanie"),
                            ("LU", "Luxembourg"),
                            ("MT", "Malte"),
                            ("NO", "Norvège"),
                            ("NL", "Pays-Bas"),
                            ("PL", "Pologne"),
                            ("PT", "Portugal"),
                            ("RO", "Roumanie"),
                            ("SK", "Slovaquie"),
                            ("SI", "Slovénie"),
                            ("SE", "Suède"),
                            ("CZ", "République Tchèque"),
                        ],
                        verbose_name="pays",
                    ),
                ),
                ("name", models.TextField(blank=True, verbose_name="nom du produit")),
                ("brand", models.TextField(blank=True, verbose_name="marque")),
                ("gamme", models.TextField(blank=True, verbose_name="gamme")),
                ("flavor", models.TextField(blank=True, verbose_name="arôme")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "galenic_formulation",
                    models.TextField(blank=True, verbose_name="forme galénique"),
                ),
                (
                    "unit_quantity",
                    models.FloatField(
                        null=True,
                        verbose_name="poids ou volume d'une unité de consommation",
                    ),
                ),
                (
                    "conditioning",
                    models.TextField(blank=True, verbose_name="conditionnements"),
                ),
                (
                    "daily_recommended_dose",
                    models.TextField(
                        blank=True, verbose_name="dose journalière recommandée"
                    ),
                ),
                (
                    "minimum_duration",
                    models.TextField(
                        blank=True, verbose_name="durabilité minimale / DLUO (en mois)"
                    ),
                ),
                (
                    "instructions",
                    models.TextField(blank=True, verbose_name="mode d'emploi"),
                ),
                (
                    "warning",
                    models.TextField(
                        blank=True, verbose_name="mise en garde et avertissement"
                    ),
                ),
                (
                    "effects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        null=True,
                        size=None,
                        verbose_name="objectifs ou effets",
                    ),
                ),
                (
                    "other_effects",
                    models.TextField(
                        blank=True, verbose_name="autres objectifs ou effets non-listés"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="auteur",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.company",
                        verbose_name="entreprise",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "unit_measurement",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.substanceunit",
                        verbose_name="unité de mesure pour une unité de consommation",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical déclaration",
                "verbose_name_plural": "historical déclarations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDeclaredIngredient",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("new", models.BooleanField(default=False)),
                ("new_name", models.TextField(blank=True, verbose_name="libellé")),
                (
                    "new_description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("active", models.BooleanField(default=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "declaration",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.declaration",
                        verbose_name="déclaration",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "ingredient",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.ingredient",
                        verbose_name="ingrédient ajouté par l'user",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical declared ingredient",
                "verbose_name_plural": "historical declared ingredients",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDeclaredMicroorganism",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("new", models.BooleanField(default=False)),
                (
                    "new_name",
                    models.TextField(
                        blank=True,
                        verbose_name="nom du micro-organisme ajoutée manuellement",
                    ),
                ),
                (
                    "new_genre",
                    models.TextField(
                        blank=True,
                        verbose_name="genre du micro-organisme ajoutée manuellement",
                    ),
                ),
                (
                    "new_description",
                    models.TextField(
                        blank=True,
                        verbose_name="description du micro-organisme ajoutée manuellement",
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("souche", models.TextField(blank=True, verbose_name="souche")),
                (
                    "quantity",
                    models.FloatField(
                        blank=True, null=True, verbose_name="quantité par DJR (en CFU)"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "declaration",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.declaration",
                        verbose_name="déclaration",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "microorganism",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.microorganism",
                        verbose_name="microorganisme ajouté par l'user",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical declared microorganism",
                "verbose_name_plural": "historical declared microorganisms",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDeclaredPlant",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("new", models.BooleanField(default=False)),
                (
                    "new_name",
                    models.TextField(
                        blank=True, verbose_name="nom de la plante ajoutée manuellement"
                    ),
                ),
                (
                    "new_description",
                    models.TextField(
                        blank=True,
                        verbose_name="description de la plante ajoutée manuellement",
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                (
                    "quantity",
                    models.FloatField(
                        blank=True, null=True, verbose_name="quantité par DJR"
                    ),
                ),
                (
                    "preparation",
                    models.TextField(blank=True, verbose_name="préparation"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "declaration",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.declaration",
                        verbose_name="déclaration",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "plant",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.plant",
                        verbose_name="plante ajoutée par l'user",
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.substanceunit",
                        verbose_name="unité",
                    ),
                ),
                (
                    "used_part",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.plantpart",
                        verbose_name="partie utilisée",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical declared plant",
                "verbose_name_plural": "historical declared plants",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDeclaredSubstance",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "declaration",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.declaration",
                        verbose_name="déclaration",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "substance",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="data.substance",
                        verbose_name="substance ajoutée par l'user",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical declared substance",
                "verbose_name_plural": "historical declared substances",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
