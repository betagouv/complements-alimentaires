# Generated by Django 5.0.2 on 2024-03-01 21:13

import django.db.models.deletion
import django.db.models.functions.comparison
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("data", "0020_rename_ca_is_obsolete_condition_ca_is_obsolete_and_more"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="condition",
            name="is_obsolete",
        ),
        migrations.RemoveField(
            model_name="condition",
            name="name",
        ),
        migrations.RemoveField(
            model_name="ingredient",
            name="is_obsolete",
        ),
        migrations.RemoveField(
            model_name="ingredient",
            name="name",
        ),
        migrations.RemoveField(
            model_name="microorganism",
            name="genre",
        ),
        migrations.RemoveField(
            model_name="microorganism",
            name="is_obsolete",
        ),
        migrations.RemoveField(
            model_name="microorganism",
            name="name",
        ),
        migrations.RemoveField(
            model_name="part",
            name="is_useful",
        ),
        migrations.RemoveField(
            model_name="part",
            name="must_be_monitored",
        ),
        migrations.RemoveField(
            model_name="plant",
            name="ca_family",
        ),
        migrations.RemoveField(
            model_name="plant",
            name="is_obsolete",
        ),
        migrations.RemoveField(
            model_name="plant",
            name="name",
        ),
        migrations.RemoveField(
            model_name="plantfamily",
            name="is_obsolete",
        ),
        migrations.RemoveField(
            model_name="plantfamily",
            name="name",
        ),
        migrations.RemoveField(
            model_name="plantpart",
            name="is_obsolete",
        ),
        migrations.RemoveField(
            model_name="plantpart",
            name="name",
        ),
        migrations.RemoveField(
            model_name="population",
            name="is_obsolete",
        ),
        migrations.RemoveField(
            model_name="population",
            name="name",
        ),
        migrations.RemoveField(
            model_name="substance",
            name="cas_number",
        ),
        migrations.RemoveField(
            model_name="substance",
            name="einec_number",
        ),
        migrations.RemoveField(
            model_name="substance",
            name="is_obsolete",
        ),
        migrations.RemoveField(
            model_name="substance",
            name="max_quantity",
        ),
        migrations.RemoveField(
            model_name="substance",
            name="must_specify_quantity",
        ),
        migrations.RemoveField(
            model_name="substance",
            name="name",
        ),
        migrations.RemoveField(
            model_name="substance",
            name="nutritional_reference",
        ),
        migrations.RemoveField(
            model_name="substance",
            name="source",
        ),
        migrations.AddField(
            model_name="condition",
            name="is_obsolete",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
                ),
                output_field=models.BooleanField(verbose_name="objet obsol√®te"),
            ),
        ),
        migrations.AddField(
            model_name="condition",
            name="name",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
                    models.F("siccrf_name"),
                ),
                output_field=models.TextField(verbose_name="nom"),
            ),
        ),
        migrations.AddField(
            model_name="ingredient",
            name="is_obsolete",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
                ),
                output_field=models.BooleanField(verbose_name="objet obsol√®te"),
            ),
        ),
        migrations.AddField(
            model_name="ingredient",
            name="name",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
                    models.F("siccrf_name"),
                ),
                output_field=models.TextField(verbose_name="nom"),
            ),
        ),
        migrations.AddField(
            model_name="microorganism",
            name="genre",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_genre"), models.Value("")),
                    models.F("siccrf_genre"),
                ),
                output_field=models.TextField(verbose_name="genre de micro-organisme"),
            ),
        ),
        migrations.AddField(
            model_name="microorganism",
            name="is_obsolete",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
                ),
                output_field=models.BooleanField(verbose_name="objet obsol√®te"),
            ),
        ),
        migrations.AddField(
            model_name="microorganism",
            name="name",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
                    models.F("siccrf_name"),
                ),
                output_field=models.TextField(verbose_name="nom"),
            ),
        ),
        migrations.AddField(
            model_name="part",
            name="is_useful",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    models.F("ca_is_useful"), models.F("siccrf_is_useful")
                ),
                output_field=models.BooleanField(verbose_name="üçµ utile ?"),
            ),
        ),
        migrations.AddField(
            model_name="part",
            name="must_be_monitored",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    models.F("ca_must_be_monitored"),
                    models.F("siccrf_must_be_monitored"),
                ),
                output_field=models.BooleanField(verbose_name="‚ö†Ô∏è √† surveiller ?"),
            ),
        ),
        migrations.AddField(
            model_name="plant",
            name="ca_family",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="ca_plant_set",
                to="data.plantfamily",
                verbose_name="famille de plante",
            ),
        ),
        migrations.AddField(
            model_name="plant",
            name="family",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    models.F("ca_family"), models.F("siccrf_family")
                ),
                output_field=models.BigIntegerField(verbose_name="famille de plante"),
            ),
        ),
        migrations.AddField(
            model_name="plant",
            name="is_obsolete",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
                ),
                output_field=models.BooleanField(verbose_name="objet obsol√®te"),
            ),
        ),
        migrations.AddField(
            model_name="plant",
            name="name",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
                    models.F("siccrf_name"),
                ),
                output_field=models.TextField(verbose_name="nom"),
            ),
        ),
        migrations.AddField(
            model_name="plantfamily",
            name="is_obsolete",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
                ),
                output_field=models.BooleanField(verbose_name="objet obsol√®te"),
            ),
        ),
        migrations.AddField(
            model_name="plantfamily",
            name="name",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
                    models.F("siccrf_name"),
                ),
                output_field=models.TextField(verbose_name="nom"),
            ),
        ),
        migrations.AddField(
            model_name="plantpart",
            name="is_obsolete",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
                ),
                output_field=models.BooleanField(verbose_name="objet obsol√®te"),
            ),
        ),
        migrations.AddField(
            model_name="plantpart",
            name="name",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
                    models.F("siccrf_name"),
                ),
                output_field=models.TextField(verbose_name="nom"),
            ),
        ),
        migrations.AddField(
            model_name="population",
            name="is_obsolete",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
                ),
                output_field=models.BooleanField(verbose_name="objet obsol√®te"),
            ),
        ),
        migrations.AddField(
            model_name="population",
            name="name",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
                    models.F("siccrf_name"),
                ),
                output_field=models.TextField(verbose_name="nom"),
            ),
        ),
        migrations.AddField(
            model_name="substance",
            name="cas_number",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_cas_number"), models.Value("")),
                    models.F("siccrf_cas_number"),
                ),
                output_field=models.CharField(blank=True, max_length=10, verbose_name="num√©ro CAS"),
            ),
        ),
        migrations.AddField(
            model_name="substance",
            name="einec_number",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_einec_number"), models.Value("")),
                    models.F("siccrf_einec_number"),
                ),
                output_field=models.CharField(blank=True, max_length=7, verbose_name="num√©ro EINECS"),
            ),
        ),
        migrations.AddField(
            model_name="substance",
            name="is_obsolete",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    models.F("ca_is_obsolete"), models.F("siccrf_is_obsolete")
                ),
                output_field=models.BooleanField(verbose_name="objet obsol√®te"),
            ),
        ),
        migrations.AddField(
            model_name="substance",
            name="max_quantity",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    models.F("ca_nutritional_reference"),
                    models.F("siccrf_nutritional_reference"),
                ),
                output_field=models.FloatField(
                    blank=True,
                    null=True,
                    verbose_name="sp√©cification de quantit√© obligatoire",
                ),
            ),
        ),
        migrations.AddField(
            model_name="substance",
            name="must_specify_quantity",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    models.F("ca_must_specify_quantity"),
                    models.F("siccrf_must_specify_quantity"),
                ),
                output_field=models.BooleanField(default=False, verbose_name="sp√©cification de quantit√© obligatoire"),
            ),
        ),
        migrations.AddField(
            model_name="substance",
            name="name",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_name"), models.Value("")),
                    models.F("siccrf_name"),
                ),
                output_field=models.TextField(verbose_name="nom"),
            ),
        ),
        migrations.AddField(
            model_name="substance",
            name="nutritional_reference",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    "ca_nutritional_reference", "siccrf_nutritional_reference"
                ),
                output_field=models.FloatField(blank=True, null=True, verbose_name="apport nutritionnel conseill√©"),
            ),
        ),
        migrations.AddField(
            model_name="substance",
            name="source",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    django.db.models.functions.comparison.NullIf(models.F("ca_source"), models.Value("")),
                    models.F("siccrf_source"),
                ),
                output_field=models.TextField(),
            ),
        ),
    ]
