# Generated by Django 5.1.7 on 2025-05-02 10:04

import logging
from django.db import migrations
from data.etl.teleicare_history.extractor import convert_str_date

logger = logging.getLogger(__name__)


class Migration(migrations.Migration):

    dependencies = [
        ('data', '0142_historicalingredient_history_public_change_reason_and_more'),
    ]

    def fill_siccrf_registration_date(apps, schema_editor):
        IcaEtablissement = apps.get_model("data", "IcaEtablissement")
        EtablissementToCompanyRelation = apps.get_model("data", "EtablissementToCompanyRelation")
        for relation in EtablissementToCompanyRelation.objects.all():
            # IcaEtablissement.etab_date_adhesion est parfois None
            try:
                relation.siccrf_registration_date = convert_str_date(IcaEtablissement.objects.get(
                    etab_ident=relation.siccrf_id
                ).etab_date_adhesion)
            except IcaEtablissement.DoesNotExist:
                logger.info(f'La relation entre Company(id={relation.company_id}) et IcaEtablissement(etab_ident={relation.siccrf_id}) existe mais IcaEtablissement(etab_ident={relation.siccrf_id}) n\'existe pas.')
            relation.save()

    def reverse_fill_siccrf_registration_date(apps, schema_editor):
        pass

    operations = [
        migrations.RunPython(fill_siccrf_registration_date, reverse_fill_siccrf_registration_date),

    ]
