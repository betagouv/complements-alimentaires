# Generated by Django 5.1.7 on 2025-07-04 13:58

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("data", "0161_condition_new_is_obsolete_condition_new_name_and_more"),
    ]

    def set_new_fields_from_generated(apps, schema_editor):
        Condition = apps.get_model("data", "Condition")
        for condition in Condition.objects.all():
            condition.new_is_obsolete = condition.is_obsolete
            condition.new_name = condition.name

        Effect = apps.get_model("data", "Effect")
        for effect in Effect.objects.all():
            effect.new_is_obsolete = effect.is_obsolete
            effect.new_name = effect.name

        GalenicFormulation = apps.get_model("data", "GalenicFormulation")
        for galenicformulation in GalenicFormulation.objects.all():
            galenicformulation.new_is_obsolete = galenicformulation.is_obsolete
            galenicformulation.new_name = galenicformulation.name

        Ingredient = apps.get_model("data", "Ingredient")
        for ingredient in Ingredient.objects.all():
            ingredient.new_is_obsolete = ingredient.is_obsolete
            ingredient.new_name = ingredient.name
            ingredient.new_private_comments = ingredient.private_comments
            ingredient.new_public_comments = ingredient.public_comments
            ingredient.new_status = ingredient.status

        Microorganism = apps.get_model("data", "Microorganism")
        for microorganism in Microorganism.objects.all():
            microorganism.new_is_obsolete = microorganism.is_obsolete
            microorganism.new_name = microorganism.name
            microorganism.new_private_comments = microorganism.private_comments
            microorganism.new_public_comments = microorganism.public_comments
            ingredient.new_status = ingredient.status
            microorganism.new_species = microorganism.species
            microorganism.new_genus = microorganism.genus

        Plant = apps.get_model("data", "Plant")
        for plant in Plant.objects.all():
            plant.new_is_obsolete = plant.is_obsolete
            plant.new_name = plant.name
            plant.new_private_comments = plant.private_comments
            plant.new_public_comments = plant.public_comments
            ingredient.new_status = ingredient.status
            plant.new_family_by_id = plant.family_by_id

        Part = apps.get_model("data", "Part")
        for part in Part.objects.all():
            part.new_is_useful = part.is_useful
            part.new_must_be_monitored = part.must_be_monitored

        PlantFamily = apps.get_model("data", "PlantFamily")
        for plantfamily in PlantFamily.objects.all():
            plantfamily.new_is_obsolete = plantfamily.is_obsolete
            plantfamily.new_name = plantfamily.name

        PlantPart = apps.get_model("data", "PlantPart")
        for plantpart in PlantPart.objects.all():
            plantpart.new_is_obsolete = plantpart.is_obsolete
            plantpart.new_name = plantpart.name

        Preparation = apps.get_model("data", "Preparation")
        for preparation in Preparation.objects.all():
            preparation.new_is_obsolete = preparation.is_obsolete
            preparation.new_name = preparation.name

        Substance = apps.get_model("data", "Substance")
        for substance in Substance.objects.all():
            substance.new_is_obsolete = substance.is_obsolete
            substance.new_name = substance.name
            substance.new_private_comments = substance.private_comments
            substance.new_public_comments = substance.public_comments
            ingredient.new_status = ingredient.status
            substance.new_cas_number = substance.cas_number
            substance.new_einec_number = substance.einec_number
            substance.new_must_specify_quantity = substance.must_specify_quantity
            substance.new_nutritional_reference = substance.nutritional_reference
            substance.new_source = substance.source

        MaxquantityPerPopulationRelation = apps.get_model("data", "MaxquantityPerPopulationRelation")
        for maxquantityperpopulationrelation in MaxquantityPerPopulationRelation.objects.all():
            maxquantityperpopulationrelation.new_max_quantity = maxquantityperpopulationrelation.max_quantity

    def reverse_set_new_fields_from_generated(apps, schema_editor):
        pass

    operations = [
        migrations.RunPython(set_new_fields_from_generated, reverse_set_new_fields_from_generated),
    ]
