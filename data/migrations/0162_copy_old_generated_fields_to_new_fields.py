# Generated by Django 5.1.7 on 2025-07-04 13:58

from django.db import migrations, models
from django.core.paginator import Paginator

class Migration(migrations.Migration):
    dependencies = [
        ("data", "0161_condition_new_is_obsolete_condition_new_name_and_more"),
    ]

    def set_new_fields_from_generated(apps, schema_editor):
        Condition = apps.get_model("data", "Condition")
        for condition in Condition.objects.all():
            condition.new_is_obsolete = condition.is_obsolete
            condition.new_name = condition.name
            condition.save()

        HistoricalCondition = apps.get_model("data", "HistoricalCondition")
        paginator = Paginator(HistoricalCondition.objects.all(), 1000)

        for page_num in paginator.page_range:
            objects_to_save = []

            for obj in paginator.page(page_num).object_list:
                obj.new_is_obsolete = obj.ca_is_obsolete or obj.siccrf_is_obsolete
                obj.new_name = obj.ca_name or obj.siccrf_name
                objects_to_save.append(obj)
            HistoricalCondition.objects.bulk_update(objects_to_save, ["new_is_obsolete", "new_name"])

        Effect = apps.get_model("data", "Effect")
        for effect in Effect.objects.all():
            effect.new_is_obsolete = effect.is_obsolete
            effect.new_name = effect.name
            effect.save()

        HistoricalEffect = apps.get_model("data", "HistoricalEffect")
        paginator = Paginator(HistoricalEffect.objects.all(), 1000)

        for page_num in paginator.page_range:
            objects_to_save = []

            for obj in paginator.page(page_num).object_list:
                obj.new_is_obsolete = obj.ca_is_obsolete or obj.siccrf_is_obsolete
                obj.new_name = obj.ca_name or obj.siccrf_name
                objects_to_save.append(obj)
            HistoricalEffect.objects.bulk_update(objects_to_save, ["new_is_obsolete", "new_name"])

        GalenicFormulation = apps.get_model("data", "GalenicFormulation")
        for galenicformulation in GalenicFormulation.objects.all():
            galenicformulation.new_is_obsolete = galenicformulation.is_obsolete
            galenicformulation.new_name = galenicformulation.name
            galenicformulation.save()

        HistoricalGalenicFormulation = apps.get_model("data", "HistoricalGalenicFormulation")
        paginator = Paginator(HistoricalGalenicFormulation.objects.all(), 1000)

        for page_num in paginator.page_range:
            objects_to_save = []

            for obj in paginator.page(page_num).object_list:
                obj.new_is_obsolete = obj.ca_is_obsolete or obj.siccrf_is_obsolete
                obj.new_name = obj.ca_name or obj.siccrf_name
                objects_to_save.append(obj)
            HistoricalGalenicFormulation.objects.bulk_update(objects_to_save, ["new_is_obsolete", "new_name"])

        Ingredient = apps.get_model("data", "Ingredient")
        for ingredient in Ingredient.objects.all():
            ingredient.new_is_obsolete = ingredient.is_obsolete
            ingredient.new_name = ingredient.name
            ingredient.new_private_comments = ingredient.private_comments
            ingredient.new_public_comments = ingredient.public_comments
            ingredient.new_status = ingredient.status
            ingredient.save()

        HistoricalIngredient = apps.get_model("data", "HistoricalIngredient")
        paginator = Paginator(HistoricalIngredient.objects.all(), 1000)

        for page_num in paginator.page_range:
            objects_to_save = []

            for obj in paginator.page(page_num).object_list:
                obj.new_is_obsolete = obj.ca_is_obsolete or obj.siccrf_is_obsolete
                obj.new_name = obj.ca_name or obj.siccrf_name
                obj.new_private_comments = obj.ca_private_comments or obj.siccrf_private_comments
                obj.new_public_comments = obj.ca_public_comments or obj.siccrf_public_comments
                obj.new_status = obj.ca_status # pas de siccrf_status dans l'historique avec excluded_fields
                objects_to_save.append(obj)
            HistoricalIngredient.objects.bulk_update(objects_to_save, ["new_is_obsolete", "new_name", "new_private_comments", "new_public_comments", "new_status"])

        Microorganism = apps.get_model("data", "Microorganism")
        for microorganism in Microorganism.objects.all():
            microorganism.new_is_obsolete = microorganism.is_obsolete
            microorganism.new_private_comments = microorganism.private_comments
            microorganism.new_public_comments = microorganism.public_comments
            microorganism.new_status = microorganism.status
            microorganism.new_species = microorganism.species
            microorganism.new_genus = microorganism.genus
            microorganism.save()

        HistoricalMicroorganism = apps.get_model("data", "HistoricalMicroorganism")
        paginator = Paginator(HistoricalMicroorganism.objects.all(), 1000)

        for page_num in paginator.page_range:
            objects_to_save = []

            for obj in paginator.page(page_num).object_list:
                obj.new_is_obsolete = obj.ca_is_obsolete or obj.siccrf_is_obsolete
                obj.new_private_comments = obj.ca_private_comments or obj.siccrf_private_comments
                obj.new_public_comments = obj.ca_public_comments or obj.siccrf_public_comments
                obj.new_species = obj.ca_species or obj.siccrf_species
                obj.new_genus = obj.ca_genus or obj.siccrf_genus
                obj.new_status = obj.ca_status # pas de siccrf_status dans l'historique avec excluded_fields
                objects_to_save.append(obj)
            HistoricalMicroorganism.objects.bulk_update(objects_to_save, ["new_is_obsolete", "new_private_comments", "new_public_comments", "new_species", "new_genus", "new_status"])

        Part = apps.get_model("data", "Part")
        for part in Part.objects.all():
            part.new_is_useful = part.is_useful
            part.new_must_be_monitored = part.must_be_monitored
            part.save()

        HistoricalPart = apps.get_model("data", "HistoricalPart")
        paginator = Paginator(HistoricalPart.objects.all(), 1000)

        for page_num in paginator.page_range:
            objects_to_save = []

            for obj in paginator.page(page_num).object_list:
                obj.new_is_useful = obj.ca_is_useful or obj.siccrf_is_useful
                obj.new_must_be_monitored = obj.ca_must_be_monitored or obj.siccrf_must_be_monitored
                objects_to_save.append(obj)
            HistoricalPart.objects.bulk_update(objects_to_save, ["new_is_useful", "new_must_be_monitored"])

        PlantFamily = apps.get_model("data", "PlantFamily")
        for plantfamily in PlantFamily.objects.all():
            plantfamily.new_is_obsolete = plantfamily.is_obsolete
            plantfamily.new_name = plantfamily.name
            plantfamily.save()

        HistoricalPlantFamily = apps.get_model("data", "HistoricalPlantFamily")
        paginator = Paginator(HistoricalPlantFamily.objects.all(), 1000)

        for page_num in paginator.page_range:
            objects_to_save = []

            for obj in paginator.page(page_num).object_list:
                obj.new_is_obsolete = obj.ca_is_obsolete or obj.siccrf_is_obsolete
                obj.new_name = obj.ca_name or obj.siccrf_name
                objects_to_save.append(obj)
            HistoricalPlantFamily.objects.bulk_update(objects_to_save, ["new_is_obsolete", "new_name"])

        Plant = apps.get_model("data", "Plant")
        for plant in Plant.objects.all():
            plant.new_is_obsolete = plant.is_obsolete
            plant.new_name = plant.name
            plant.new_private_comments = plant.private_comments
            plant.new_public_comments = plant.public_comments
            plant.new_status = plant.status
            plant.new_family = PlantFamily.objects.get(id=plant.family_by_id)
            plant.save()

        HistoricalPlant = apps.get_model("data", "HistoricalPlant")
        paginator = Paginator(HistoricalPlant.objects.all(), 1000)

        for page_num in paginator.page_range:
            objects_to_save = []

            for obj in paginator.page(page_num).object_list:
                obj.new_is_obsolete = obj.ca_is_obsolete or obj.siccrf_is_obsolete
                obj.new_name = obj.ca_name or obj.siccrf_name
                obj.new_private_comments = obj.ca_private_comments or obj.siccrf_private_comments
                obj.new_public_comments = obj.ca_public_comments or obj.siccrf_public_comments
                obj.new_status = obj.ca_status # pas de siccrf_status dans l'historique avec excluded_fields
                # TODO family
                objects_to_save.append(obj)
            HistoricalPlant.objects.bulk_update(objects_to_save, ["new_is_obsolete", "new_name", "new_private_comments", "new_public_comments", "new_status", "new_family"])

        PlantPart = apps.get_model("data", "PlantPart")
        for plantpart in PlantPart.objects.all():
            plantpart.new_is_obsolete = plantpart.is_obsolete
            plantpart.new_name = plantpart.name
            plantpart.save()

        HistoricalPlantPart = apps.get_model("data", "HistoricalPlantPart")
        paginator = Paginator(HistoricalPlantPart.objects.all(), 1000)

        for page_num in paginator.page_range:
            objects_to_save = []

            for obj in paginator.page(page_num).object_list:
                obj.new_is_obsolete = obj.ca_is_obsolete or obj.siccrf_is_obsolete
                obj.new_name = obj.ca_name or obj.siccrf_name
                objects_to_save.append(obj)
            HistoricalPlantPart.objects.bulk_update(objects_to_save, ["new_is_obsolete", "new_name"])

        Preparation = apps.get_model("data", "Preparation")
        for preparation in Preparation.objects.all():
            preparation.new_is_obsolete = preparation.is_obsolete
            preparation.new_name = preparation.name
            preparation.save()

        HistoricalPreparation = apps.get_model("data", "HistoricalPreparation")
        paginator = Paginator(HistoricalPreparation.objects.all(), 1000)

        for page_num in paginator.page_range:
            objects_to_save = []

            for obj in paginator.page(page_num).object_list:
                obj.new_is_obsolete = obj.ca_is_obsolete or obj.siccrf_is_obsolete
                obj.new_name = obj.ca_name or obj.siccrf_name
                objects_to_save.append(obj)
            HistoricalPreparation.objects.bulk_update(objects_to_save, ["new_is_obsolete", "new_name"])

        Substance = apps.get_model("data", "Substance")
        for substance in Substance.objects.all():
            substance.new_is_obsolete = substance.is_obsolete
            substance.new_name = substance.name
            substance.new_private_comments = substance.private_comments
            substance.new_public_comments = substance.public_comments
            substance.new_status = substance.status
            substance.new_cas_number = substance.cas_number
            substance.new_einec_number = substance.einec_number
            substance.new_must_specify_quantity = substance.must_specify_quantity
            substance.new_nutritional_reference = substance.nutritional_reference
            substance.new_source = substance.source
            substance.save()

        HistoricalSubstance = apps.get_model("data", "HistoricalSubstance")
        paginator = Paginator(HistoricalSubstance.objects.all(), 1000)

        for page_num in paginator.page_range:
            objects_to_save = []

            for obj in paginator.page(page_num).object_list:
                obj.new_is_obsolete = obj.ca_is_obsolete or obj.siccrf_is_obsolete
                obj.new_name = obj.ca_name or obj.siccrf_name
                obj.new_private_comments = obj.ca_private_comments or obj.siccrf_private_comments
                obj.new_public_comments = obj.ca_public_comments or obj.siccrf_public_comments
                obj.new_status = obj.ca_status # pas de siccrf_status dans l'historique avec excluded_fields
                obj.new_cas_number = obj.ca_cas_number or obj.siccrf_cas_number
                obj.new_einec_number = obj.ca_einec_number or obj.siccrf_einec_number
                obj.new_must_specify_quantity = obj.ca_must_specify_quantity or obj.siccrf_must_specify_quantity
                obj.new_nutritional_reference = obj.ca_nutritional_reference or obj.siccrf_nutritional_reference
                obj.new_source = obj.ca_source or obj.siccrf_source
                objects_to_save.append(obj)
            HistoricalSubstance.objects.bulk_update(objects_to_save, ["new_is_obsolete", "new_name", "new_private_comments", "new_public_comments", "new_status", "new_cas_number", "new_einec_number", "new_must_specify_quantity", "new_nutritional_reference", "new_source"])

        MaxquantityPerPopulationRelation = apps.get_model("data", "MaxquantityPerPopulationRelation")
        for maxquantityperpopulationrelation in MaxquantityPerPopulationRelation.objects.all():
            maxquantityperpopulationrelation.new_max_quantity = maxquantityperpopulationrelation.max_quantity
            maxquantityperpopulationrelation.save()

        HistoricalMaxquantityPerPopulationRelation = apps.get_model("data", "HistoricalMaxquantityPerPopulationRelation")
        paginator = Paginator(HistoricalMaxquantityPerPopulationRelation.objects.all(), 1000)

        for page_num in paginator.page_range:
            objects_to_save = []

            for obj in paginator.page(page_num).object_list:
                obj.new_max_quantity = obj.ca_max_quantity or obj.siccrf_max_quantity
                objects_to_save.append(obj)
            HistoricalMaxquantityPerPopulationRelation.objects.bulk_update(objects_to_save, ["new_max_quantity"])

    def reverse_set_new_fields_from_generated(apps, schema_editor):
        Condition = apps.get_model("data", "Condition")
        for condition in Condition.objects.all():
            condition.ca_is_obsolete = condition.new_is_obsolete
            condition.ca_name = condition.new_name
            condition.save()

        Effect = apps.get_model("data", "Effect")
        for effect in Effect.objects.all():
            effect.ca_is_obsolete = effect.new_is_obsolete
            effect.ca_name = effect.new_name
            effect.save()

        GalenicFormulation = apps.get_model("data", "GalenicFormulation")
        for galenicformulation in GalenicFormulation.objects.all():
            galenicformulation.ca_is_obsolete = galenicformulation.new_is_obsolete
            galenicformulation.ca_name = galenicformulation.new_name
            galenicformulation.save()

        Ingredient = apps.get_model("data", "Ingredient")
        for ingredient in Ingredient.objects.all():
            ingredient.ca_is_obsolete = ingredient.new_is_obsolete
            ingredient.ca_name = ingredient.new_name
            ingredient.ca_private_comments = ingredient.new_private_comments
            ingredient.ca_public_comments = ingredient.new_public_comments
            ingredient.ca_status = ingredient.new_status
            ingredient.save()

        Microorganism = apps.get_model("data", "Microorganism")
        for microorganism in Microorganism.objects.all():
            microorganism.ca_is_obsolete = microorganism.new_is_obsolete
            microorganism.ca_private_comments = microorganism.new_private_comments
            microorganism.ca_public_comments = microorganism.new_public_comments
            microorganism.ca_status = microorganism.new_status
            microorganism.ca_species = microorganism.new_species
            microorganism.ca_genus = microorganism.new_genus
            microorganism.save()

        Plant = apps.get_model("data", "Plant")
        for plant in Plant.objects.all():
            plant.ca_is_obsolete = plant.new_is_obsolete
            plant.ca_name = plant.new_name
            plant.ca_private_comments = plant.new_private_comments
            plant.ca_public_comments = plant.new_public_comments
            plant.ca_status = plant.new_status
            plant.ca_family = plant.new_family
            plant.save()

        Part = apps.get_model("data", "Part")
        for part in Part.objects.all():
            part.ca_is_useful = part.new_is_useful
            part.ca_must_be_monitored = part.new_must_be_monitored
            part.save()

        PlantFamily = apps.get_model("data", "PlantFamily")
        for plantfamily in PlantFamily.objects.all():
            plantfamily.ca_is_obsolete = plantfamily.new_is_obsolete
            plantfamily.ca_name = plantfamily.new_name
            plantfamily.save()

        PlantPart = apps.get_model("data", "PlantPart")
        for plantpart in PlantPart.objects.all():
            plantpart.ca_is_obsolete = plantpart.new_is_obsolete
            plantpart.ca_name = plantpart.new_name
            plantpart.save()

        Preparation = apps.get_model("data", "Preparation")
        for preparation in Preparation.objects.all():
            preparation.ca_is_obsolete = preparation.new_is_obsolete
            preparation.ca_name = preparation.new_name
            preparation.save()

        Substance = apps.get_model("data", "Substance")
        for substance in Substance.objects.all():
            substance.ca_is_obsolete = substance.new_is_obsolete
            substance.ca_name = substance.new_name
            substance.ca_private_comments = substance.new_private_comments
            substance.ca_public_comments = substance.new_public_comments
            substance.ca_status = substance.new_status
            substance.ca_cas_number = substance.new_cas_number
            substance.ca_einec_number = substance.new_einec_number
            substance.ca_must_specify_quantity = substance.new_must_specify_quantity
            substance.ca_nutritional_reference = substance.new_nutritional_reference
            substance.ca_source = substance.new_source
            substance.save()

        MaxquantityPerPopulationRelation = apps.get_model("data", "MaxquantityPerPopulationRelation")
        for maxquantityperpopulationrelation in MaxquantityPerPopulationRelation.objects.all():
            maxquantityperpopulationrelation.ca_max_quantity = maxquantityperpopulationrelation.new_max_quantity
            maxquantityperpopulationrelation.save()

    operations = [
        migrations.RunPython(set_new_fields_from_generated, reverse_set_new_fields_from_generated),
    ]
