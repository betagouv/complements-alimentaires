# Generated by Django 5.1.7 on 2025-06-11 13:17
import logging
from django.db import migrations
from django.db.models import Count, Max

logger = logging.getLogger(__name__)


class Migration(migrations.Migration):

    dependencies = [
        ('data', '0153_alter_etablissementtocompanyrelation_options_and_more'),
    ]

    def deduplicate_declared_ingredients(apps, schema_editor):
        def deduplicate_ingredients(objects, unique_fields):
            duplicates = (
                objects.values(*unique_fields)
                .order_by()
                .annotate(max_id=Max("id"), count_id=Count("id"))
                .filter(count_id__gt=1)
            )

            for duplicate in duplicates:
                (objects.filter(**{x: duplicate[x] for x in unique_fields}).exclude(id=duplicate["max_id"]).delete())

        Declaration = apps.get_model("data", "Declaration")
        DeclaredIngredient = apps.get_model("data", "DeclaredIngredient")
        DeclaredMicroorganism = apps.get_model("data", "DeclaredMicroorganism")
        DeclaredPlant = apps.get_model("data", "DeclaredPlant")
        ComputedSubstance = apps.get_model("data", "ComputedSubstance")
        batch_nb = 0
        # les déclarations historiques n'ont pas de substances déclarées
        for teleicare_declaration in Declaration.objects.exclude(siccrf_id=None).order_by('siccrf_id'):
            deduplicate_ingredients(
                DeclaredIngredient.objects.filter(declaration=teleicare_declaration), ["ingredient_id", "active"]
            )
            deduplicate_ingredients(
                DeclaredMicroorganism.objects.filter(declaration=teleicare_declaration),
                ["microorganism_id", "active", "strain"],
            )
            deduplicate_ingredients(
                DeclaredPlant.objects.filter(declaration=teleicare_declaration),
                ["plant_id", "active", "used_part", "preparation"],
            )
            deduplicate_ingredients(
                ComputedSubstance.objects.filter(declaration=teleicare_declaration),
                ["substance_id"],
            )
            batch_nb +=1
            if batch_nb % 1000 == 0 :
                logger.info(f"Batch de 1000 : {teleicare_declaration.siccrf_id}")

    def reverse_deduplicate_declared_ingredients(apps, schema_editor):
        pass

    operations = [
        # appliquée manuellement pour ne pas dépasser le timeout CC du deploiement
        # migrations.RunPython(deduplicate_declared_ingredients, reverse_deduplicate_declared_ingredients),
    ]
